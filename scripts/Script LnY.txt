import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score, mean_absolute_percentage_error
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeRegressor

df = pd.read_csv("C:/Users/HP/OneDrive - Universidad Tecnológica de Panamá/MAESTRIA EN ANALITICA DE DATOS/MODELOS PREDICTIVOS/proyecto gastos medicos - cambios del profesor/PROCESO DE CAMBIOS/Ln Y/Dataset_Codificado_lny.csv")
df.head()

#ANÁLISIS ESTADÍSTICO DE ln(y)
# Estadísticos descriptivos
lny_stats = df[['lny']].describe().T
print("Estadísticos descriptivos para la variable 'lny':")
display(lny_stats)

# Moda
lny_mode = pd.DataFrame(df[['lny']].mode().iloc[0]).T
print("\nModa de la variable 'lny':")
display(lny_mode)

# Rango Intercuartílico (IQR)
lny_iqr = pd.DataFrame(df[['lny']].quantile(0.75) - df[['lny']].quantile(0.25)).T
lny_iqr.index = ['IQR']
print("\nRango Intercuartílico (IQR) de la variable 'lny':")
display(lny_iqr)

#### DISTRIBUCIÓN DE ln(y)

col_num = ['lny']

for col in col_num:
    plt.figure(figsize=(6,4))
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f'Distribución de {col}')
    plt.xlabel(col)
    plt.ylabel('Frecuencia')
    plt.grid(True)
    plt.show()

#BOXPLOT

plt.figure(figsize=(15, 12))

plt.subplot(1, 1, 1)
sns.boxplot(data=df, y='lny', color='lightgreen')
plt.title("Ln Y")

plt.tight_layout()
plt.show()

#### Análisis de Variabilidad (Coeficiente de Variación)

cv = df[col_num].std() / df[col_num].mean()
print("Coeficiente de Variación por variable numérica:")
print(cv.round(3))

#MAPA DE CALOR DE CORRELACIONES

plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title("Mapa de Calor de Correlaciones")
plt.tight_layout()
plt.show()

#Análisis de R² Individual (Regresión Simple)

#Para esto, hacemos una regresión lineal de charges con cada columna numérica por separado

for col in ['age', 'bmi', 'children']:
    X = df[[col]]
    y = df['lny']
    model = LinearRegression().fit(X, y)
    r2 = model.score(X, y)
    print(f'R² de charges ~ {col}: {r2:.4f}')


# BOXPLOTS

# Boxplot de Ln (y) según si fuma o no
plt.figure(figsize=(7, 4))
sns.boxplot(x='smoker_yes', y='lny', data=df)
plt.xticks([0, 1], ['No fumador', 'Fumador'])
plt.title("Ln (y) según si es Fumador")
plt.xlabel("Fumador")
plt.ylabel("Ln (y)")
plt.tight_layout()
plt.show()

# Boxplot de Ln (y) según el género
plt.figure(figsize=(7, 4))
sns.boxplot(x='sex_male', y='lny', data=df)
plt.xticks([0, 1], ['Mujer', 'Hombre'])
plt.title("Ln (y) según Género")
plt.xlabel("Sexo")
plt.ylabel("Ln (y)")
plt.tight_layout()
plt.show()

# Boxplot según la región. Para ello recreamos la columna 'region'
region_columns = [col for col in df.columns if col.startswith('region_')]
region_map = {
    'region_northwest': 'Northwest',
    'region_southeast': 'Southeast',
    'region_southwest': 'Southwest'
}

df['region'] = 'Northeast'
for col in region_map:
    df.loc[df[col] == 1, 'region'] = region_map[col]

plt.figure(figsize=(8, 5))
sns.boxplot(x='region', y='lny', data=df)
plt.title("Ln (y) según Región")
plt.xlabel("Región")
plt.ylabel("Ln (y)")
plt.tight_layout()
plt.show()


#VALOR DE R2 PARA CADA VARIABLE CODIFICADA

binary_cols = ['sex_male', 'smoker_yes', 
               'region_northwest', 'region_southeast', 'region_southwest']

print("Correlación con ln (y):")
for col in binary_cols:
    corr = df[col].astype(int).corr(df['lny'])
    print(f"{col}: {corr:.4f}")

print("\nR² (Regresión lineal simple) con Ln (y):")
for col in binary_cols:
    X = df[[col]].astype(int)
    y = df['lny']
    model = LinearRegression().fit(X, y)
    r2 = model.score(X, y)
    print(f"{col}: R² = {r2:.4f}")


#SEPARAMOS NUESTRAS VARIABES X Y Y

#Eliminamos nuevamente la columna region, charges y lny  para definir nuestra X.
X = df.drop(['lny', 'region','charges'], axis=1)
y = df['lny']

#DIVIDIMOS NUESTRO CONJUNTO DE ENTRENAMIENTO Y PRUEBA

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Tamaño del set de entrenamiento:", X_train.shape)
print("Tamaño del set de prueba:", X_test.shape)


from sklearn.ensemble import RandomForestRegressor

# ENTRENAMIENTO DEL MODELO DE REGRESIÓN RANDOM FOREST
model_rf = RandomForestRegressor(random_state=42)
model_rf.fit(X_train, y_train)

# PREDICCIONES
y_pred_rf = model_rf.predict(X_test)

# EVALUACIÓN DEL MODELO
mae_rf = mean_absolute_error(y_test, y_pred_rf)
mse_rf = mean_squared_error(y_test, y_pred_rf)
rmse_rf = np.sqrt(mse_rf)
r2_rf = r2_score(y_test, y_pred_rf)
mape_rf = mean_absolute_percentage_error(y_test, y_pred_rf) * 100

print(f"MAE: {mae_rf:.2f}")
print(f"MSE: {mse_rf:.2f}")
print(f"RMSE: {rmse_rf:.2f}")
print(f"R²: {r2_rf:.4f}")
print(f"MAPE: {mape_rf:.2f}%")


# VISUALIZACIÓN DE VALORES REALES VS VALORES DEL MODELO RANDOM FOREST
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred_rf, alpha=0.5, color='green')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--r')
plt.xlabel("Valores Reales (y_test)")
plt.ylabel("Valores Predichos (y_pred_rf)")
plt.title("REGRESIÓN RANDOM FOREST: Valores Reales vs Predichos")
plt.tight_layout()
plt.savefig("PRECISION_REGRESION_RANDOM_FOREST.png")
plt.show()

# GRÁFICO DE RESIDUOS PARA RANDOM FOREST
residuos_rf = y_test - y_pred_rf

plt.figure(figsize=(8, 5))
sns.histplot(residuos_rf, kde=True, color='purple')
plt.title("Distribución de los Residuos - Random Forest")
plt.xlabel("Error (y_real - y_predicho)")
plt.tight_layout()
plt.savefig("RESIDUOS_REGRESION_RANDOM_FOREST.png")
plt.show()
